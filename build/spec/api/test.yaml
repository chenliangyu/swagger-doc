# 文档结构规范
# 文件名以「小写 + 下划线」的方式命名
# 不同的产品放在不同的文件夹下，以现在有的 api 的文件规范编写，例如: auth.yaml，task.yaml 等
# +-- project - project 下所有的接口
# |   +-- auth.yaml
# +-- wiki - wiki 下所有的接口
# |   +-- template.yaml
# 如果文件接口过大，将一个文件转换成文件夹，文件夹下以 index.yaml 作为入口文件，每一个 path 作为一个文件，在 index.yaml 中引入
# 如：
# +-- project
# |   +-- auth
# |   |   +-- index.yaml
# |   |   +-- login.yaml
# |   |   +-- token_info.yaml
# |   |   +-- errors.yaml
# |   |   +-- parameters.yaml   
# |   |   +-- schemas.yaml
# Open API 的固定写法，暂时统一使用 3.0.0 的版本
openapi: "3.0.0"
info:
  # 当前 API 的版本，Semantic Version 规范
  # patch 版本：修改描述等无关 Api 语义的内容，1.0.0 -> 1.0.1
  # minor 版本：新增接口，新增字段等可以向前兼容的修改，1.0.0 -> 1.1.0
  # major 版本：接口发生 Break Change，1.0.0 -> 2.0.0
  version: 1.0.0
  # 当前文档的标题
  title: Swagger Test Api
  # 用于描述当前文档的接口的范围，例如哪些接口应该属于当前的文档，支持 markdown 语法
  description:
    和 pet 相关的接口
servers:
  # 当前文档接口的 baseUrl，分测试环境和正式环境
  - url: http://api.ones.ai/project/v1
paths:
  /example/{parameterInPath}:
    # 如果同一个 path 有不同的 method 与之对应，则按照 get, post 的形式展示
    get:
      # 每一个 path 的每一个 Method 都是 operation
      # operation 的属性需要按照 tags, operationId, description, parameters, requestBody ,responses 的

      # Tag命名规则：以文件名首字母大写的驼峰写法
      tags:
        - Test
      # operationId 用于自动生成代码，和显示无关，采用驼峰命名法
      operationId: listExample
      #用于描述当前接口的作用，支持 markdown 语法
      description: 获取 Example 列表
      parameters:
        # 所有参数都需要列明，如果有多个 yaml 文件通用的情况，提取到 common 目录下 parameters.yaml 中
        # parameter in path 需要将名字与 path 中的名字一一对应
        - name: parameterInPath
          in: path
          # 描述参数表达的意义，包括特殊一些特殊情况之类的，支持 markdown 语法
          description: parameter 的描述
          # 是否必填
          required: false
          # 是否不再使用
          deprecated: false
          # 使用举例
          example: 1
          # 如果有多种情况的举例
          examples:
            # 每一个example 需要取名，命名规范以具体的场景为准
            first: 1
            second: 2
          # 参数的schema,schema 的编写查看 Open Api  的文档说明
          schema:
            type: integer
            format: int32
        #parameter in query, 名字描述与参数具体的名字一致,属性同上
        - name: start
          in: query
          description: start
          required: false
          schema:
            type: integer
            format: int32
        #parameter in Header, 名字描述与 header 里的名字相同,属性同上
        - name: Ones-Auth-Token
          in: header
          description: token
          schema:
            type: integer
            format: int32
        # 通用部分抽取的规则如下：
        # 1. 接口独有的部分不得抽取
        # 2. 当前文件下通用的部分，抽取到components/(对应的部分，如schemas,requestBodies等)，引入为 $ref: #/components/schemas/SomeThing
        # 3. 如果是全部文件通用的部分，抽取到 common 文件夹下的对应文件里,引入方式为 $ref: ./spec/common/schemas.yaml#/SomeThing
        - $ref: "./spec/common/parameters.yaml#/parameters/Ones-User-Id"
      # 请求的body，引用规则查看parameter
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filterBy:
                  type: string
      responses:
        # response 的顺序按状态码从小到大排列，最后一个为 default
        '200':
          # response 的描述，如果接口的返回有 schema 无法表达的部分，在 description 里，支持 markdown 语法
          description: A paged array of pets
          # 返回头，如果有，需要说明
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          # 返回内容，引用规则查看parameter
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Example"
        # 每一个错误码都需要表达，如果该接口执行过程中引用了其他的接口，也应该表达出该接口可能的状态码
        400:
          description:
          content:
            application/json:
              schema:
                # 如果一个状态码对应多个错误码，使用 oneOf 的语意明确列出所有的可能值
                # 如果错误码对象的提取规则查看 parameter
                oneOf:
                  - description: 邮箱为空
                    type: object
                    properties:
                      errcode:
                        type: string
                        enum:
                          - MissingParameter.Email
                      code:
                        type: integer
                        format: int32
                        #目前接口上可能会有一个错误码对应多个状态码的情况，是为了兼容旧代码
                        #写法上需要将该接口所有的可能的状态码写在enum中
                        enum:
                          - 400
                          - 801
                      type:
                        type: string
                        enum:
                          - MissingParameter
                      field:
                        type: string
                        enum:
                          - Email
                    required:
                      - errcode
                      - code
                      - type
                      - field
                  - $ref: '#/components/schemas/MalformedJSON'
        # 每个接口都会有未知的预料之外的错误，此时用一个通用的错误处理
        default:
          content:
            application/json:
              schema:
                $ref: '/spec/common/errors.yaml#/UnknownError'
components:
  schemas:
    # model 的首字母需要大写
    Example:
      type: object
      properties:
        name:
          type: string
    MalformedJSON:
      description: JSON 解析错误
      type: object
      properties:
        errcode:
          type: string
          enum:
            - Malformed.JSON
        code:
          type: integer
          format: int32
          enum:
            - 400
        type:
          type: string
          enum:
            - Malformed
        format:
          type: string
          enum:
            - JSON
      required:
        - errcode
        - code
        - type
        - format
          